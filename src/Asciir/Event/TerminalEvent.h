#pragma once

#include "Event.h"

// Events related to the terminal. client is currently always set to false and will be implemented in a future version

namespace Asciir
{
	
	/// @brief event class for the terminal close event.
	/// 
	/// contains the signal of the event @see getSignal().
	/// 
	/// Categories: Asciir::CategoryTerminal  
	/// Type: EventType::TerminalClosed  
	/// 
	class TerminalClosedEvent : public Event
	{
	protected:
		int m_signal;
	public:
		TerminalClosedEvent(int signal) : m_signal(signal) {}
		TerminalClosedEvent()
			: m_signal(-1) {
			m_valid = false;
		}

		/// @return returns the signal of the event @see SIG_CTRL_C  SIG_CMD_CLOSE.
		int getSignal() { AR_EVENT_IS_VALID; return m_signal; }

		AR_EVENT_CATEGORY_DEFINE(CategoryTerminal)
		AR_EVENT_TYPE_DEFINE(TerminalClosed)
	};

	/// @brief event class for terminal resize events.
	/// 
	/// a maximum of 1 resize event is generated per update.  
	/// This event will act as if the previous size before the update has been resized directly to the new size during the update,
	/// ignoring any other sizing modifications inbetween.
	/// 
	/// Categories: Asciir::CategoryTerminal  
	/// Type: EventType::TerminalResized  
	/// 
	class TerminalResizedEvent : public Event
	{
	protected:
		TermVert m_size;
		TermVert m_size_diff;
		bool m_client;
	public:
		TerminalResizedEvent(TermVert size, TermVert size_diff, bool by_client)
			: m_size(size), m_size_diff(size_diff), m_client(by_client)
		{}

		TerminalResizedEvent()
			: m_size(INVALID_EVENT_COORD), m_size_diff(INVALID_EVENT_COORD), m_client(false) {
			m_valid = false;
		}

		/// @return returns the new size of the terminal, after the resize.
		TermVert getSize() const { AR_EVENT_IS_VALID; return m_size; }
		/// @return returns the delta size, meaning the size difference between the new and the old size.
		TermVert getDiff() const { AR_EVENT_IS_VALID; return m_size_diff; }

		/// @return returns wether this event was generated by the user resizing the terminal (false), or the application calling Renderer::resize() (true).
		bool client() const { AR_EVENT_IS_VALID; return m_client; }

		/// @return formatted as: "TerminalResized:\n{getSize}:{getDiff()} [{client()}]" 
		virtual std::string toString() const override
		{
			std::stringstream msg;

			msg << "TerminalResized:\n" << getSize() << ':' << getDiff() << " [" << client() << ']';

			return msg.str();
		}

		AR_EVENT_CATEGORY_DEFINE(CategoryTerminal)
		AR_EVENT_TYPE_DEFINE(TerminalResized)
	};

	/// @brief event class for terminal move events.
	/// 
	/// a maximum of 1 move event is generated per update similar to TerminalResizedTo.  
	/// 
	/// Categories: Asciir::CategoryTerminal  
	/// Type: EventType::TerminalMoved  
	/// 
	class TerminalMovedEvent : public Event
	{
	protected:
		Coord m_pos;
		Coord m_offset;
		bool m_client;
	public:
		TerminalMovedEvent(Coord pos, Coord offset, bool by_client)
			:m_pos(pos), m_offset(offset), m_client(by_client)
		{}

		TerminalMovedEvent()
			: m_pos(INVALID_EVENT_COORD), m_offset(INVALID_EVENT_COORD), m_client(false) {
			m_valid = false;
		}

		/// @return returns the position of the terminal, when the event was generated.
		Coord getPos() const { AR_EVENT_IS_VALID; return m_pos; }
		/// @return returns the delta position of the terminal, meaning the difference between the current position and the last position of the terminal.
		Coord getDiff() const { AR_EVENT_IS_VALID; return m_offset; }

		/// @return  returns wether this event was generated by the user moving the terminal (false), or the application calling Renderer::move() (true).
		bool client() { AR_EVENT_IS_VALID; return m_client; }

		/// @return string formatted as: "TerminalMoved:\n{getPos()}:{getDiff()}" 
		virtual std::string toString() const override
		{
			std::stringstream msg;

			msg << "TerminalMoved:\n" << getPos() << ':' << getDiff();

			return msg.str();
		}

		AR_EVENT_CATEGORY_DEFINE(CategoryTerminal)
		AR_EVENT_TYPE_DEFINE(TerminalMoved)
	};

	/// @brief event class for terminal focus events.
	/// 
	/// Categories: Asciir::CategoryTerminal  
	/// Type: EventType::TerminalFocused  
	/// 
	class TerminalFocusEvent : public Event
	{
	protected:
		bool m_focused;
	public:
		TerminalFocusEvent(bool focused)
			: m_focused(focused) {}

		TerminalFocusEvent()
			: m_focused(false) {
			m_valid = false;
		}

		/// @return returns wether the terminal has gained or lost focus. 
		bool isFocused() { AR_EVENT_IS_VALID; return m_focused; }

		AR_EVENT_CATEGORY_DEFINE(CategoryTerminal)
		AR_EVENT_TYPE_DEFINE(TerminalFocus)
	};
}
