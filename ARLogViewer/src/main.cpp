#include <Asciir.h>
#include "LogViewer.h"

/// @brief application for displaying log files generated by other Asciir programs
/// 
/// the log file can be actively written to and the app will automaticly output additional log lines.
/// the log levels are colour coded as
/// > info		:	white  
/// > notify	:	green  
/// > warning	:	yellow  
/// > critical	:	orange  
/// > error		:	red  
/// 
class LogTerm : public Asciir::ARApp
{
public:

	Asciir::LogViewer logviewer;
	std::string m_log_dir;

	/// @param log_dir path to the log file to be displayed
	LogTerm(const std::string& log_dir)
		:logviewer(log_dir, {
		Asciir::WHITE8,		// Info Colour White (Default terminal Colour)
		Asciir::IGREEN8,	// Notify Colour Green
		Asciir::YELLOW8,	// Warning Colour Yellow
		Asciir::IYELLOW8,	// Critical Colour Orange
		Asciir::IRED8		// Error Colour Red
		}),
		m_log_dir(log_dir)
	{}

	~LogTerm()
	{
		logviewer.close();
	}
	
	/// @brief called when asciir is initialized and ready to start up
	void start(const std::vector<std::string>& args) override
	{
		// set the title of the terminal to the current log dir
		Asciir::ARApp::getApplication()->getTermRenderer().setTitle(m_log_dir);
		Asciir::ARApp::getApplication()->getTermRenderer().update();


		Asciir::Renderer::setTitle("LogViewer");
		
		// wait until the log file is created, if it does not exist
		while (true)
		{
			if (std::filesystem::exists(m_log_dir))
			{
				logviewer.open();
				break;
			}

			Asciir::sleep(100);
		}

		while (true)
		{
			if (logviewer.hasLogs())
				logviewer.logLineOut(std::cout);
			// if this is true, the log file has been shrunk and is most likely completely cleared
			else if (logviewer.pos() > logviewer.size())
			{
				// clear the console and assume log file has been completely cleared
				logviewer.reset(std::cout);
				std::cout << "\x1b[2J\x1b[H";
			}
		}
	}
};

/// @brief entry point for ARLogViewer
///
/// @param argc can take a maksimum of 1 additional command line argument
/// @param argv (optional) the path to the log file. if not specified, use default log dir
int main(int argc, char** argv)
{
	std::string log_dir = AR_CORE_LOG_DIR;
	if (argc > 2)
	{
		std::cout << "Cannot take more than one commandline argument!\n";
		throw std::runtime_error("Cannot take more than one commandline argument!\n");
	}
	else if (argc == 2)
	{
		log_dir = argv[1];
	}

	std::cout << std::filesystem::current_path() << '\n';

	Asciir::asciirInit(new LogTerm(log_dir), argc, argv);
}